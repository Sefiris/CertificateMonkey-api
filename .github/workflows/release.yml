name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: go test -v -race ./...

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git info

    - name: Set lowercase image name
      run: |
        echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=Certificate Monkey
          org.opencontainers.image.description=Certificate and Private Key Management API
          org.opencontainers.image.vendor=Certificate Monkey
          org.opencontainers.image.licenses=MIT

    - name: Get build information
      id: build-info
      run: |
        echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" >> $GITHUB_OUTPUT
        echo "git_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "go_version=go${{ env.GO_VERSION }}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      id: build
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          VERSION=${{ steps.build-info.outputs.version }}
          BUILD_TIME=${{ steps.build-info.outputs.build_time }}
          GIT_COMMIT=${{ steps.build-info.outputs.git_commit }}
          GO_VERSION=${{ steps.build-info.outputs.go_version }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Tag and push latest (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        # Get the first tag that was built and pushed
        FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest"

        echo "Tagging $FIRST_TAG as $LATEST_TAG"
        docker buildx imagetools create --tag "$LATEST_TAG" "$FIRST_TAG"
        echo "✅ Latest tag created and pushed"

    - name: Wait for image to be available
      run: sleep 30

    - name: Pull image for analysis
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Pulling latest image for analysis..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      if: github.ref == 'refs/heads/main'
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
      env:
        SYFT_REGISTRY_AUTH_USERNAME: ${{ github.actor }}
        SYFT_REGISTRY_AUTH_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        SYFT_REGISTRY_AUTH_AUTHORITY: ${{ env.REGISTRY }}

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        name: sbom
        path: sbom.spdx.json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: github.ref == 'refs/heads/main'
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-results.sarif'

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=$(cat VERSION)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release-notes
      run: |
        # Extract changelog for current version
        VERSION="${{ steps.version.outputs.version }}"

        # Get the changelog section for this version
        if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
          # Extract the section between this version and the next version header
          NOTES=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
        else
          NOTES="Release ${VERSION}"
        fi

        # Write to file to preserve multiline content
        echo "${NOTES}" > release-notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true
        files: |
          VERSION
          CHANGELOG.md

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest"
        echo "This is where you would integrate with your deployment system"
        # Example: kubectl, helm, or other deployment tools
        # kubectl set image deployment/certificate-monkey certificate-monkey=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-push, create-release, deploy-staging]
    if: always()

    steps:
    - name: Notify success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "✅ Successfully built and pushed Docker image"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}"

        if [[ "${{ needs.create-release.result }}" == "success" ]]; then
          echo "🏷️ Created GitHub release"
        fi

        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "🚀 Deployed to staging"
        fi

    - name: Notify failure
      if: needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Build and push failed"
        exit 1
