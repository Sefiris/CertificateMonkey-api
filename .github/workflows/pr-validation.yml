name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

    - name: Check coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        # TODO: Gradually increase this threshold as we add more unit tests
        # Current coverage: 33.5% - Target: 80%+ (see TODO.md)
        # Fail if coverage is below 33%
        if (( $(echo "$COVERAGE < 33" | bc -l) )); then
          echo "Coverage is below 33%"
          exit 1
        fi

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec security scan
      run: gosec -fmt sarif -out gosec-results.sarif -stdout -verbose=text ./...

    - name: Upload gosec scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'gosec-results.sarif'

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git info

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get build information
      id: build-info
      run: |
        echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" >> $GITHUB_OUTPUT
        echo "git_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "go_version=go${{ env.GO_VERSION }}" >> $GITHUB_OUTPUT

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ steps.build-info.outputs.version }}
          BUILD_TIME=${{ steps.build-info.outputs.build_time }}
          GIT_COMMIT=${{ steps.build-info.outputs.git_commit }}
          GO_VERSION=${{ steps.build-info.outputs.go_version }}
        tags: |
          certificate-monkey:pr-${{ github.event.number }}
          certificate-monkey:${{ steps.build-info.outputs.git_commit }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Build for local testing
        docker build \
          --build-arg VERSION=${{ steps.build-info.outputs.version }} \
          --build-arg BUILD_TIME=${{ steps.build-info.outputs.build_time }} \
          --build-arg GIT_COMMIT=${{ steps.build-info.outputs.git_commit }} \
          --build-arg GO_VERSION=${{ steps.build-info.outputs.go_version }} \
          -t certificate-monkey:test .

        # Test that the container starts and health check passes
        docker run -d --name test-container -p 8080:8080 \
          -e API_KEY_1=test-key \
          -e DYNAMODB_TABLE=test-table \
          -e KMS_KEY_ID=test-key \
          certificate-monkey:test

        # Wait for container to start
        sleep 10

        # Check health endpoint
        if ! docker exec test-container curl -f http://localhost:8080/health; then
          echo "Health check failed"
          docker logs test-container
          exit 1
        fi

        # Check build info endpoint
        docker exec test-container curl -s http://localhost:8080/build-info

        # Cleanup
        docker stop test-container
        docker rm test-container

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker-build]
    if: always()

    steps:
    - name: PR Summary
      run: |
        echo "## 🚀 PR Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "🎉 All checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some checks failed. Please review and fix the issues." >> $GITHUB_STEP_SUMMARY
