basePath: /api/v1
definitions:
  models.CertificateEntity:
    properties:
      certificate:
        type: string
      city:
        type: string
      common_name:
        description: Certificate Information
        type: string
      country:
        type: string
      created_at:
        type: string
      csr:
        type: string
      email_address:
        type: string
      encrypted_private_key:
        type: string
      fingerprint:
        type: string
      id:
        description: DynamoDB Primary Key
        type: string
      key_type:
        allOf:
        - $ref: '#/definitions/models.KeyType'
        description: Cryptographic Details
      organization:
        type: string
      organizational_unit:
        type: string
      serial_number:
        type: string
      state:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.CertificateStatus'
        description: Metadata
      subject_alternative_names:
        items:
          type: string
        type: array
      tags:
        additionalProperties:
          type: string
        type: object
      updated_at:
        type: string
      valid_from:
        description: Certificate Details (populated when certificate is uploaded)
        type: string
      valid_to:
        type: string
    type: object
  models.CertificateStatus:
    enum:
    - PENDING_CSR
    - CSR_CREATED
    - CERT_UPLOADED
    - COMPLETED
    type: string
    x-enum-varnames:
    - StatusPendingCSR
    - StatusCSRCreated
    - StatusCertUploaded
    - StatusCompleted
  models.CreateKeyRequest:
    properties:
      city:
        type: string
      common_name:
        type: string
      country:
        type: string
      email_address:
        type: string
      key_type:
        $ref: '#/definitions/models.KeyType'
      organization:
        type: string
      organizational_unit:
        type: string
      state:
        type: string
      subject_alternative_names:
        items:
          type: string
        type: array
      tags:
        additionalProperties:
          type: string
        type: object
    required:
    - common_name
    - key_type
    type: object
  models.CreateKeyResponse:
    properties:
      common_name:
        type: string
      created_at:
        type: string
      csr:
        type: string
      id:
        type: string
      key_type:
        $ref: '#/definitions/models.KeyType'
      status:
        $ref: '#/definitions/models.CertificateStatus'
      tags:
        additionalProperties:
          type: string
        type: object
    type: object
  models.ExportPrivateKeyResponse:
    properties:
      common_name:
        example: example.com
        type: string
      exported_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      key_type:
        allOf:
        - $ref: '#/definitions/models.KeyType'
        example: RSA2048
      private_key:
        example: |-
          -----BEGIN PRIVATE KEY-----
          MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB...
          -----END PRIVATE KEY-----
        type: string
    type: object
  models.GeneratePFXRequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  models.GeneratePFXResponse:
    properties:
      filename:
        example: example.com-550e8400.pfx
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      pfx_data:
        example: base64_encoded_pfx_data
        type: string
    type: object
  models.KeyType:
    enum:
    - RSA2048
    - RSA4096
    - ECDSA-P256
    - ECDSA-P384
    type: string
    x-enum-varnames:
    - KeyTypeRSA2048
    - KeyTypeRSA4096
    - KeyTypeECDSAP256
    - KeyTypeECDSAP384
  models.ListKeysResponse:
    properties:
      keys:
        items:
          $ref: '#/definitions/models.CertificateEntity'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  models.UploadCertificateRequest:
    properties:
      certificate:
        type: string
    required:
    - certificate
    type: object
  models.UploadCertificateResponse:
    properties:
      fingerprint:
        type: string
      id:
        type: string
      serial_number:
        type: string
      status:
        $ref: '#/definitions/models.CertificateStatus'
      updated_at:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@certificate-monkey.com
    name: Certificate Monkey Support
    url: https://github.com/your-org/certificate-monkey
  description: A secure certificate management API for private keys, CSRs, and certificates
  license:
    name: MIT
    url: https://github.com/your-org/certificate-monkey/blob/main/LICENSE
  termsOfService: https://github.com/your-org/certificate-monkey/blob/main/TERMS.md
  title: Certificate Monkey API
  version: "1.0"
paths:
  /keys:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of certificate entities with optional
        filtering by tags, status, key type, and date range
      parameters:
      - description: Filter by certificate status
        enum:
        - CSR_CREATED
        - CERT_UPLOADED
        - EXPIRED
        - REVOKED
        in: query
        name: status
        type: string
      - description: Filter by key type
        enum:
        - RSA2048
        - RSA4096
        - ECDSA-P256
        - ECDSA-P384
        in: query
        name: key_type
        type: string
      - description: Filter certificates created after this date (RFC3339 format)
        in: query
        name: date_from
        type: string
      - description: Filter certificates created before this date (RFC3339 format)
        in: query
        name: date_to
        type: string
      - description: 'Page number for pagination (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (default: 50, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Filter by environment tag
        in: query
        name: environment
        type: string
      - description: Filter by project tag
        in: query
        name: project
        type: string
      - description: Filter by team tag
        in: query
        name: team
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of certificate entities
          schema:
            $ref: '#/definitions/models.ListKeysResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List certificates with filtering
      tags:
      - Certificate Management
    post:
      consumes:
      - application/json
      description: Generates a new private key pair and creates a certificate signing
        request (CSR) with the provided details
      parameters:
      - description: Certificate creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created private key and CSR
          schema:
            $ref: '#/definitions/models.CreateKeyResponse'
        "400":
          description: Bad request - invalid input parameters
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new private key and certificate signing request
      tags:
      - Certificate Management
  /keys/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific certificate entity including its private key,
        CSR, and certificate details
      parameters:
      - description: Certificate ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Certificate entity details
          schema:
            $ref: '#/definitions/models.CertificateEntity'
        "400":
          description: Bad request - invalid ID format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Certificate not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get certificate by ID
      tags:
      - Certificate Management
  /keys/{id}/certificate:
    put:
      consumes:
      - application/json
      description: Uploads and validates a certificate against an existing certificate
        signing request
      parameters:
      - description: Certificate entity ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Certificate upload request containing PEM-encoded certificate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UploadCertificateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Certificate uploaded successfully
          schema:
            $ref: '#/definitions/models.UploadCertificateResponse'
        "400":
          description: Bad request - invalid certificate or ID format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Certificate entity not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Upload certificate for existing CSR
      tags:
      - Certificate Management
  /keys/{id}/pfx:
    post:
      consumes:
      - application/json
      description: Creates a password-protected PKCS#12 file containing the private
        key and certificate
      parameters:
      - description: Certificate entity ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: PFX generation request with password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GeneratePFXRequest'
      produces:
      - application/json
      responses:
        "200":
          description: PFX file generated successfully (base64 encoded)
          schema:
            $ref: '#/definitions/models.GeneratePFXResponse'
        "400":
          description: Bad request - certificate not ready or invalid password
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Certificate entity not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Generate PFX/P12 file
      tags:
      - Certificate Management
  /keys/{id}/private-key:
    get:
      consumes:
      - application/json
      description: 'Exports the decrypted private key in PEM format. WARNING: This
        operation exposes sensitive cryptographic material and should be used with
        extreme caution. Ensure proper access controls and audit logging.'
      parameters:
      - description: Certificate entity ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Private key exported successfully
          schema:
            $ref: '#/definitions/models.ExportPrivateKeyResponse'
        "400":
          description: Bad request - invalid ID format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Certificate entity not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Export private key (SENSITIVE OPERATION)
      tags:
      - Certificate Management
securityDefinitions:
  ApiKeyAuth:
    description: API key for authentication. Can also be provided as Bearer token
      in Authorization header.
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: 'Bearer token authentication. Format: "Bearer <api-key>"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
