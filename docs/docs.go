// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/your-org/certificate-monkey/blob/main/TERMS.md",
        "contact": {
            "name": "Certificate Monkey Support",
            "url": "https://github.com/your-org/certificate-monkey",
            "email": "support@certificate-monkey.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/your-org/certificate-monkey/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/keys": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of certificate entities with optional filtering by tags, status, key type, and date range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Management"
                ],
                "summary": "List certificates with filtering",
                "parameters": [
                    {
                        "enum": [
                            "CSR_CREATED",
                            "CERT_UPLOADED",
                            "EXPIRED",
                            "REVOKED"
                        ],
                        "type": "string",
                        "description": "Filter by certificate status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "RSA2048",
                            "RSA4096",
                            "ECDSA-P256",
                            "ECDSA-P384"
                        ],
                        "type": "string",
                        "description": "Filter by key type",
                        "name": "key_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter certificates created after this date (RFC3339 format)",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter certificates created before this date (RFC3339 format)",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number for pagination (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page (default: 50, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by environment tag",
                        "name": "environment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by project tag",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by team tag",
                        "name": "team",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of certificate entities",
                        "schema": {
                            "$ref": "#/definitions/models.ListKeysResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a new private key pair and creates a certificate signing request (CSR) with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Management"
                ],
                "summary": "Create a new private key and certificate signing request",
                "parameters": [
                    {
                        "description": "Certificate creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created private key and CSR",
                        "schema": {
                            "$ref": "#/definitions/models.CreateKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/keys/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific certificate entity including its private key, CSR, and certificate details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Management"
                ],
                "summary": "Get certificate by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificate entity details",
                        "schema": {
                            "$ref": "#/definitions/models.CertificateEntity"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Certificate not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/keys/{id}/certificate": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads and validates a certificate against an existing certificate signing request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Management"
                ],
                "summary": "Upload certificate for existing CSR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate entity ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate upload request containing PEM-encoded certificate",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UploadCertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificate uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UploadCertificateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid certificate or ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Certificate entity not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/keys/{id}/pfx": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a password-protected PKCS#12 file containing the private key and certificate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Management"
                ],
                "summary": "Generate PFX/P12 file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate entity ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PFX generation request with password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GeneratePFXRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PFX file generated successfully (base64 encoded)",
                        "schema": {
                            "$ref": "#/definitions/models.GeneratePFXResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - certificate not ready or invalid password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Certificate entity not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/keys/{id}/private-key": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exports the decrypted private key in PEM format. WARNING: This operation exposes sensitive cryptographic material and should be used with extreme caution. Ensure proper access controls and audit logging.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Management"
                ],
                "summary": "Export private key (SENSITIVE OPERATION)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate entity ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Private key exported successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ExportPrivateKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Certificate entity not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CertificateEntity": {
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "common_name": {
                    "description": "Certificate Information",
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "csr": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "encrypted_private_key": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "description": "DynamoDB Primary Key",
                    "type": "string"
                },
                "key_type": {
                    "description": "Cryptographic Details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.KeyType"
                        }
                    ]
                },
                "organization": {
                    "type": "string"
                },
                "organizational_unit": {
                    "type": "string"
                },
                "serial_number": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "description": "Metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CertificateStatus"
                        }
                    ]
                },
                "subject_alternative_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "valid_from": {
                    "description": "Certificate Details (populated when certificate is uploaded)",
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "models.CertificateStatus": {
            "type": "string",
            "enum": [
                "PENDING_CSR",
                "CSR_CREATED",
                "CERT_UPLOADED",
                "COMPLETED"
            ],
            "x-enum-varnames": [
                "StatusPendingCSR",
                "StatusCSRCreated",
                "StatusCertUploaded",
                "StatusCompleted"
            ]
        },
        "models.CreateKeyRequest": {
            "type": "object",
            "required": [
                "common_name",
                "key_type"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "common_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "key_type": {
                    "$ref": "#/definitions/models.KeyType"
                },
                "organization": {
                    "type": "string"
                },
                "organizational_unit": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "subject_alternative_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.CreateKeyResponse": {
            "type": "object",
            "properties": {
                "common_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "csr": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key_type": {
                    "$ref": "#/definitions/models.KeyType"
                },
                "status": {
                    "$ref": "#/definitions/models.CertificateStatus"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.ExportPrivateKeyResponse": {
            "type": "object",
            "properties": {
                "common_name": {
                    "type": "string",
                    "example": "example.com"
                },
                "exported_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "key_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.KeyType"
                        }
                    ],
                    "example": "RSA2048"
                },
                "private_key": {
                    "type": "string",
                    "example": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKB...\n-----END PRIVATE KEY-----"
                }
            }
        },
        "models.GeneratePFXRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "models.GeneratePFXResponse": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string",
                    "example": "example.com-550e8400.pfx"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "pfx_data": {
                    "type": "string",
                    "example": "base64_encoded_pfx_data"
                }
            }
        },
        "models.KeyType": {
            "type": "string",
            "enum": [
                "RSA2048",
                "RSA4096",
                "ECDSA-P256",
                "ECDSA-P384"
            ],
            "x-enum-varnames": [
                "KeyTypeRSA2048",
                "KeyTypeRSA4096",
                "KeyTypeECDSAP256",
                "KeyTypeECDSAP384"
            ]
        },
        "models.ListKeysResponse": {
            "type": "object",
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CertificateEntity"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "models.UploadCertificateRequest": {
            "type": "object",
            "required": [
                "certificate"
            ],
            "properties": {
                "certificate": {
                    "type": "string"
                }
            }
        },
        "models.UploadCertificateResponse": {
            "type": "object",
            "properties": {
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "serial_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.CertificateStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key for authentication. Can also be provided as Bearer token in Authorization header.",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "BearerAuth": {
            "description": "Bearer token authentication. Format: \"Bearer \u003capi-key\u003e\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Certificate Monkey API",
	Description:      "A secure certificate management API for private keys, CSRs, and certificates",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
